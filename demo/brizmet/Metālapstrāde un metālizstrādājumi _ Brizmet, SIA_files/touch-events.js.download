/**
 * Touch events jQuery plugin
 *
 * @link http://www.monosolutions.com
 * @copyright mono solutions 2014
 */
(function ($, Modernizr, document, undefined) {

    'use strict';

    if (!Modernizr.touch) {
        return;
    }

    var $document = $(document),
        touchStartEvent = 'touchstart',
        touchMoveEvent = 'touchmove',
        touchEndEvent = 'touchend';

    /**
     * Prevents the default action of an event
     *
     * @param {object} event jQuery event object
     */
    function preventDefault(event) {
        event.preventDefault();
    }

    /**
     * Add tap event to jQuery
     *
     * @type {Object}
     */
    $.event.special.tap = {

        options: {
            threshold: {
                time: 750,
                distance: {
                    x: 10,
                    y: 10
                }
            }
        },

        setup: function () {

            var self = this,
                $self = $(self);

            $self.on(touchStartEvent, function (startEvent) {

                var options = $.event.special.tap.options,
                    touchStart =  startEvent.originalEvent.touches ? startEvent.originalEvent.touches[0] : startEvent,
                    start = {
                        coords: {
                            x: touchStart.pageX,
                            y: touchStart.pageY
                        }
                    },
                    move,
                    timeout;

                function removeHandlers() {
                    clearTimeout(timeout);
                    $self.off(touchMoveEvent, moveHandler).off(touchEndEvent, tapHandler);
                }

                function tapHandler(endEvent) {

                    removeHandlers();

                    if (startEvent.target === endEvent.target) {

                        endEvent.type = 'tap';
                        $.event.dispatch.call(self, endEvent);
                    }

                }

                // Remove tap handler if touch moves beyond the threshold
                function moveHandler(moveEvent) {

                    var touchMove = moveEvent.originalEvent.touches ? moveEvent.originalEvent.touches[0] : moveEvent;

                    move = {
                        delta: {
                            x: Math.abs(start.coords.x - touchMove.pageX),
                            y: Math.abs(start.coords.y - touchMove.pageY)
                        }
                    };

                    if (
                        move.delta.x > options.threshold.distance.x ||
                        move.delta.y > options.threshold.distance.y
                    ) {
                        removeHandlers();
                    }

                }

                // Remove tap handler if timeout expires
                timeout = setTimeout(removeHandlers, options.threshold.time);

                $self.on(touchMoveEvent, moveHandler).on(touchEndEvent, tapHandler);

            });

        }

    };

    /**
     * Add swipe event to jQuery.
     *
     * Also provides:
     * swipeleft, swiperight, quickswipeleft, quickswiperight
     *
     * @type {Object}
     */
    $.event.special.swipe = {

        options: {
            threshold: {
                distance: {
                    x: 10,
                    y: 10
                }
            },
            momentum: {
                time: 250,
                distance: {
                    x: 75,
                    y: 30
                }
            }
        },

        setup: function () {

            var self = this,
                $self = $(self);

            $self.on(touchStartEvent, function (startEvent) {

                var options = $.event.special.swipe.options,
                    touchStart = startEvent.originalEvent.touches ? startEvent.originalEvent.touches[0] : startEvent,
                    start = {
                        time: new Date().getTime(),
                        coords: {
                            x: touchStart.pageX,
                            y: touchStart.pageY
                        }
                    },
                    move,
                    timeout;

                function removeHandlers() {

                    $self.off(touchMoveEvent, moveHandler).off(touchEndEvent, swipeHandler);
                    $document.off(touchMoveEvent, preventDefault);

                }

                function swipeHandler(endEvent) {

                    removeHandlers();

                    if (!move) {
                        return;
                    }

                    var end = {
                        coords: move.coords,
                        delta: {
                            x: Math.abs(start.coords.x - move.coords.x),
                            y: Math.abs(start.coords.y - move.coords.y)
                        },
                        time: new Date().getTime()
                    };

                    if (
                        end.delta.x > options.threshold.distance.x
                    ) {

                        var swipe = 'swipe' + move.direction;

                        // If the swipe is completed within the momemtum it is a quickswipe
                        if (
                            Math.abs(start.time - end.time) < options.momentum.time &&
                            end.delta.x > options.momentum.distance.x
                        ) {
                            swipe = 'quick' + swipe;
                        }

                        endEvent.type = swipe;
                        endEvent.delta = end.delta;
                        endEvent.direction = move.direction;

                        $.event.dispatch.call(self, endEvent);

                    }

                }

                // Remove tap handler if touch moves beyond the threshold
                function moveHandler(moveEvent) {

                    var touchMove = moveEvent.originalEvent.touches ? moveEvent.originalEvent.touches[0] : moveEvent;

                    move = {
                        coords: {
                            x: touchMove.pageX,
                            y: touchMove.pageY
                        },
                        delta: {
                            x: Math.abs(start.coords.x - touchMove.pageX),
                            y: Math.abs(start.coords.y - touchMove.pageY)
                        },
                        direction: start.coords.x > touchMove.pageX ? 'left' : 'right'
                    };

                    if (move.delta.x > options.threshold.distance.x) {

                        moveEvent.type = 'swipe';
                        moveEvent.delta = move.delta;
                        moveEvent.direction = move.direction;

                        $.event.dispatch.call(self, moveEvent);

                        // Prevent scrolling while swiping
                        $document.on(touchMoveEvent, preventDefault);

                    }

                }

                $self.on(touchMoveEvent, moveHandler).on(touchEndEvent, swipeHandler);

            });

        }

    };

    // Add event aliases
    $.each({
        swipeleft: 'swipe',
        swiperight: 'swipe',
        quickswipeleft: 'swipe',
        quickswiperight: 'swipe'
    }, function (event, sourceEvent) {

        $.event.special[event] = {
            setup: function () {
                $(this).on(sourceEvent, $.noop);
            }
        };

    });

})(jQuery, Modernizr, document);
